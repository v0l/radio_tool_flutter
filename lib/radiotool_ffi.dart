// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;
import 'dart:ffi';

import 'package:ffi/ffi.dart';

/// radio_tool ffi bindings
class RadioToolFfi {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RadioToolFfi(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RadioToolFfi.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Initialize ctx structure
  int radiotool_init(
    ffi.Pointer<radiotool_ctx_ptr> ctx,
  ) {
    return _radiotool_init(
      ctx,
    );
  }

  late final _radiotool_initPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<radiotool_ctx_ptr>)>>(
      'radiotool_init');
  late final _radiotool_init = _radiotool_initPtr
      .asFunction<int Function(ffi.Pointer<radiotool_ctx_ptr>)>();

  /// Close context and free resources
  int radiotool_close(
    radiotool_ctx_ptr ctx,
  ) {
    return _radiotool_close(
      ctx,
    );
  }

  late final _radiotool_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(radiotool_ctx_ptr)>>(
          'radiotool_close');
  late final _radiotool_close =
      _radiotool_closePtr.asFunction<int Function(radiotool_ctx_ptr)>();

  /// List devices
  /// Returns error or number of devices
  int radiotool_list_devices(
    radiotool_ctx_ptr ctx,
    ffi.Pointer<ffi.Pointer<radiotool_radio_info>> infos,
  ) {
    return _radiotool_list_devices(
      ctx,
      infos,
    );
  }

  late final _radiotool_list_devicesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(radiotool_ctx_ptr,
                  ffi.Pointer<ffi.Pointer<radiotool_radio_info>>)>>(
      'radiotool_list_devices');
  late final _radiotool_list_devices = _radiotool_list_devicesPtr.asFunction<
      int Function(
          radiotool_ctx_ptr, ffi.Pointer<ffi.Pointer<radiotool_radio_info>>)>();

  /// Free radio info array information
  int radiotool_free_radio_infos(
    ffi.Pointer<radiotool_radio_info> infos,
    int n,
  ) {
    return _radiotool_free_radio_infos(
      infos,
      n,
    );
  }

  late final _radiotool_free_radio_infosPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<radiotool_radio_info>,
              ffi.Int)>>('radiotool_free_radio_infos');
  late final _radiotool_free_radio_infos = _radiotool_free_radio_infosPtr
      .asFunction<int Function(ffi.Pointer<radiotool_radio_info>, int)>();

  /// Get firmware info about a file
  int radiotool_load_firmware(
    radiotool_ctx_ptr ctx,
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Pointer<radiotool_firmware_info>> info,
  ) {
    return _radiotool_load_firmware(
      ctx,
      file,
      info,
    );
  }

  late final _radiotool_load_firmwarePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(radiotool_ctx_ptr, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<radiotool_firmware_info>>)>>(
      'radiotool_load_firmware');
  late final _radiotool_load_firmware = _radiotool_load_firmwarePtr.asFunction<
      int Function(radiotool_ctx_ptr, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<radiotool_firmware_info>>)>();
}

class radiotool_ctx extends ffi.Opaque {}

class radiotool_radio_info extends ffi.Struct {
  external Pointer<Char> manufacturer;
  external Pointer<Char> model;
  external Pointer<Char> port;
}

class radiotool_firmware_info extends ffi.Struct {
  external ffi.Pointer<ffi.Char> model;
}

abstract class radiotool_status {
  static const int RDTS_FIRMWARE_NOT_SUPPORTED = -2;
  static const int RDTS_INVALID_CTX = -1;
  static const int RDTS_OK = 0;
}

typedef radiotool_ctx_ptr = ffi.Pointer<radiotool_ctx>;
